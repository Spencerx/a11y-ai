import path from 'node:path';
import fs from 'node:fs/promises';
import process from 'node:process';
import createDebug from 'debug';
import chalk from 'chalk';
import AnsiToHtml from 'ansi-to-html';
import ora from 'ora';
import { generatePatchDiff } from '../diff.js';
import { suggestFix } from '../ai.js';
import { getPackageJson, escapeForHtml } from '../util.js';
import { reportOutputFile } from '../constants.js';

const debug = createDebug('report');

export type ReportOptions = Record<string, unknown>;

export type FileReport = {
  file: string;
  suggestion?: string;
  patch?: string;
};

export async function report(files: string[], options: ReportOptions = {}) {
  let spinner;
  try {
    spinner = ora('Generating report...').start();
    const promises = files.map(async (file) => reportFile(file, options));
    const results = await Promise.all(promises);
    await generateHtmlReport(reportOutputFile, results);
    spinner.succeed(`Generated report to ${chalk.cyan(reportOutputFile)}`);
  } catch (error: unknown) {
    spinner?.fail();
    const error_ = error as Error;
    console.error(error_.message);
    process.exitCode = 1;
  }
}

export async function generateHtmlReport(outputFile: string, reports: FileReport[]) {
  const ansiToHtml = new AnsiToHtml({
    colors: {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      2: '#070',
      // eslint-disable-next-line @typescript-eslint/naming-convention
      6: '#077'
    }
  });
  const pkg = await getPackageJson();
  const repoUrl = pkg.repository.url as string;

  let html =
    '<!doctype html><html><head><meta charset="utf-8"><title>Accessibility Suggestions Report</title><style>*{box-sizing:border-box}html{margin: 10px}</style></head><body>';
  html += '<h1>Accessibility Suggestions Report</h1>';
  html += `<em>Generated by <a href="${repoUrl}">a11y-ai</a> on ${new Date().toLocaleString()}</em>`;

  for (const report of reports) {
    if (report.suggestion !== undefined && report.patch !== undefined) {
      html += `<hr>`;
      html += `<h3>Suggested fixes for <code>${report.file}</code></h3>`;
      html += '<details><summary>Raw suggestion</summary>';
      html += `<pre><textarea rows="5" style="width:100%">${escapeForHtml(
        report.suggestion
      )}</textarea></pre></details>`;
      html += `<p><pre>${ansiToHtml.toHtml(escapeForHtml(report.patch))}</pre></p>`;
    }
  }

  await fs.mkdir(path.dirname(outputFile), { recursive: true });
  await fs.writeFile(outputFile, html);
}

export async function reportFile(file: string, options: ReportOptions = {}): Promise<FileReport> {
  try {
    debug(`Searching fixes for '${file}'...`);
    const content = await fs.readFile(file, 'utf8');
    const suggestion = await suggestFix(content);
    if (!suggestion) {
      debug(`No fix suggestion for '${file}'`);
      return { file };
    }

    debug(`Suggested fix for '${file}':`);
    const patch = generatePatchDiff(file, content, suggestion);
    debug(patch);
    return { file, suggestion, patch };
  } catch (error: unknown) {
    const error_ = error as Error;
    const message = `Could not suggest or apply fix for '${file}': ${error_.message ?? error_}`;
    debug(message);
    throw new Error(message);
  }
}
